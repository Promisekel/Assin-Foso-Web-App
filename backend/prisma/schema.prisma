generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  name              String
  password          String
  role              String          @default("user")
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now()) @map("created_at")
  lastLoginAt       DateTime?       @map("last_login_at")
  createdAlbums     Album[]         @relation("AlbumsCreated")
  createdEvents     CalendarEvent[] @relation("EventCreator")
  uploadedDocuments Document[]      @relation("DocumentsUploaded")
  eventAttendees    EventAttendee[]
  uploadedImages    Image[]         @relation("ImagesUploaded")
  acceptedInvites   Invite[]        @relation("InviteAcceptor")
  sentInvites       Invite[]        @relation("InviteSender")
  projectMembers    ProjectMember[]
  createdProjects   Project[]       @relation("ProjectCreator")
  createdTasks      Task[]          @relation("TaskCreator")
  tasks             Task[]          @relation("TaskAssignee")

  @@map("users")
}

model Invite {
  id           String    @id @default(cuid())
  email        String
  name         String
  role         String    @default("user")
  token        String    @unique
  status       String    @default("pending")
  expiresAt    DateTime  @map("expires_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  acceptedAt   DateTime? @map("accepted_at")
  invitedById  String    @map("invited_by_id")
  acceptedById String?   @map("accepted_by_id")
  acceptedBy   User?     @relation("InviteAcceptor", fields: [acceptedById], references: [id])
  invitedBy    User      @relation("InviteSender", fields: [invitedById], references: [id])

  @@map("invites")
}

model Project {
  id             String          @id @default(cuid())
  name           String
  description    String?
  status         String          @default("planning")
  priority       String          @default("medium")
  startDate      DateTime?       @map("start_date")
  dueDate        DateTime?       @map("due_date")
  budget         Float?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  createdById    String          @map("created_by_id")
  calendarEvents CalendarEvent[]
  documents      Document[]
  teamMembers    ProjectMember[]
  createdBy      User            @relation("ProjectCreator", fields: [createdById], references: [id])
  tasks          Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  role      String   @default("member")
  joinedAt  DateTime @default(now()) @map("joined_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String    @default("todo")
  priority       String    @default("medium")
  dueDate        DateTime? @map("due_date")
  estimatedHours Float?    @map("estimated_hours")
  actualHours    Float?    @map("actual_hours")
  tags           String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  projectId      String    @map("project_id")
  assignedToId   String?   @map("assigned_to_id")
  createdById    String    @map("created_by_id")
  createdBy      User      @relation("TaskCreator", fields: [createdById], references: [id])
  assignedTo     User?     @relation("TaskAssignee", fields: [assignedToId], references: [id])
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Album {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isPrivate   Boolean  @default(false) @map("is_private")
  createdAt   DateTime @default(now()) @map("created_at")
  createdById String   @map("created_by_id")
  createdBy   User     @relation("AlbumsCreated", fields: [createdById], references: [id])
  images      Image[]

  @@map("albums")
}

model Image {
  id           String   @id @default(cuid())
  title        String
  description  String?
  url          String
  publicId     String   @map("public_id")
  format       String
  width        Int
  height       Int
  fileSize     Int      @map("file_size")
  tags         String?
  metadata     String?
  createdAt    DateTime @default(now()) @map("created_at")
  albumId      String   @map("album_id")
  uploadedById String   @map("uploaded_by_id")
  uploadedBy   User     @relation("ImagesUploaded", fields: [uploadedById], references: [id])
  album        Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Document {
  id           String   @id @default(cuid())
  title        String
  description  String?
  originalName String   @map("original_name")
  url          String
  cloudinaryId String   @map("cloudinary_id")
  fileType     String   @map("file_type")
  fileSize     Int      @map("file_size")
  category     String   @default("other")
  tags         String?
  createdAt    DateTime @default(now()) @map("created_at")
  projectId    String?  @map("project_id")
  uploadedById String   @map("uploaded_by_id")
  uploadedBy   User     @relation("DocumentsUploaded", fields: [uploadedById], references: [id])
  project      Project? @relation(fields: [projectId], references: [id])

  @@map("documents")
}

model CalendarEvent {
  id          String          @id @default(cuid())
  title       String
  description String?
  startDate   DateTime        @map("start_date")
  endDate     DateTime        @map("end_date")
  location    String?
  type        String          @default("other")
  isAllDay    Boolean         @default(false) @map("is_all_day")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  projectId   String?         @map("project_id")
  createdById String          @map("created_by_id")
  createdBy   User            @relation("EventCreator", fields: [createdById], references: [id])
  project     Project?        @relation(fields: [projectId], references: [id])
  attendees   EventAttendee[]

  @@map("calendar_events")
}

model EventAttendee {
  id      String        @id @default(cuid())
  eventId String        @map("event_id")
  userId  String        @map("user_id")
  status  String        @default("invited")
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_attendees")
}
